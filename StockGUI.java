/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.Collections;
import java.util.Arrays;
/**
 *
 * @author HERO
 */
public class StockGUI extends javax.swing.JFrame {

    /**
     * Creates new form StockGUI
     */
    public StockGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortTickerButtonAsc = new javax.swing.JButton();
        sortSharesButtonAsc = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        tickerScrollPanel = new javax.swing.JScrollPane();
        tickerList = new javax.swing.JTextArea();
        sharesScrollPanel = new javax.swing.JScrollPane();
        sharesList = new javax.swing.JTextArea();
        sortTickerButtonDesc = new javax.swing.JButton();
        sortSharesButtonDesc = new javax.swing.JButton();
        equityScrollPanel = new javax.swing.JScrollPane();
        equityList = new javax.swing.JTextArea();
        sortEquityButtonAsc = new javax.swing.JButton();
        sortEquityButtonDesc = new javax.swing.JButton();
        stocksLabel = new javax.swing.JLabel();
        stocksPortfolioLabel = new javax.swing.JLabel();
        displayTotalEquityButton = new javax.swing.JButton();
        priceWatchlistScrollPanel = new javax.swing.JScrollPane();
        priceWatchlist = new javax.swing.JTextArea();
        sortPriceButtonAsc = new javax.swing.JButton();
        sortPriceButtonDesc = new javax.swing.JButton();
        sortTickerWatchlistButtonAsc = new javax.swing.JButton();
        clearButton1 = new javax.swing.JButton();
        tickerWatchlistScrollPanel = new javax.swing.JScrollPane();
        tickerWatchlist = new javax.swing.JTextArea();
        sortTickerWatchlistButtonDesc = new javax.swing.JButton();
        stocksLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sortTickerButtonAsc.setText("Sort Ticker [Ascending]");
        sortTickerButtonAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTickerButtonAscActionPerformed(evt);
            }
        });

        sortSharesButtonAsc.setText("Sort Shares [Ascending]");
        sortSharesButtonAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSharesButtonAscActionPerformed(evt);
            }
        });

        clearButton.setText("Sell All Stocks");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        tickerScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tickerScrollPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tickerScrollPanelPropertyChange(evt);
            }
        });

        tickerList.setColumns(20);
        tickerList.setRows(5);
        tickerList.setText("NVDA\nNFLX\nTSLA\nNXTD\nIGC");
        tickerScrollPanel.setViewportView(tickerList);

        sharesScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        sharesList.setColumns(20);
        sharesList.setRows(5);
        sharesList.setText("33\n15\n22\n10\n42");
        sharesScrollPanel.setViewportView(sharesList);

        sortTickerButtonDesc.setText("Sort Ticker [Descending]");
        sortTickerButtonDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTickerButtonDescActionPerformed(evt);
            }
        });

        sortSharesButtonDesc.setText("Sort Shares [Descending]");
        sortSharesButtonDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSharesButtonDescActionPerformed(evt);
            }
        });

        equityScrollPanel.setToolTipText("");
        equityScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        equityList.setColumns(20);
        equityList.setRows(5);
        equityList.setText("8223.60\n4897.50\n6687.56\n19.40\n25.62");
        equityScrollPanel.setViewportView(equityList);

        sortEquityButtonAsc.setText("Sort Equity [Ascending]");
        sortEquityButtonAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortEquityButtonAscActionPerformed(evt);
            }
        });

        sortEquityButtonDesc.setText("Sort Equity [Descending]");
        sortEquityButtonDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortEquityButtonDescActionPerformed(evt);
            }
        });

        stocksLabel.setText("Stocks");

        stocksPortfolioLabel.setText("My Portfolio");

        displayTotalEquityButton.setText("Display Total Equity");
        displayTotalEquityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTotalEquityButtonActionPerformed(evt);
            }
        });

        priceWatchlistScrollPanel.setToolTipText("");
        priceWatchlistScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        priceWatchlist.setColumns(20);
        priceWatchlist.setRows(5);
        priceWatchlist.setText("249.20\n326.50\n303.98\n1.94\n0.61");
        priceWatchlistScrollPanel.setViewportView(priceWatchlist);

        sortPriceButtonAsc.setText("Sort Price [Ascending]");
        sortPriceButtonAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPriceButtonAscActionPerformed(evt);
            }
        });

        sortPriceButtonDesc.setText("Sort Price [Descending]");
        sortPriceButtonDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPriceButtonDescActionPerformed(evt);
            }
        });

        sortTickerWatchlistButtonAsc.setText("Sort Ticker [Ascending]");
        sortTickerWatchlistButtonAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTickerWatchlistButtonAscActionPerformed(evt);
            }
        });

        clearButton1.setText("Clear Watchlist");
        clearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButton1ActionPerformed(evt);
            }
        });

        tickerWatchlistScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tickerWatchlistScrollPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tickerWatchlistScrollPanelPropertyChange(evt);
            }
        });

        tickerWatchlist.setColumns(20);
        tickerWatchlist.setRows(5);
        tickerWatchlist.setText("NVDA\nNFLX\nTSLA\nNXTD\nIGC");
        tickerWatchlistScrollPanel.setViewportView(tickerWatchlist);

        sortTickerWatchlistButtonDesc.setText("Sort Ticker [Descending]");
        sortTickerWatchlistButtonDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortTickerWatchlistButtonDescActionPerformed(evt);
            }
        });

        stocksLabel1.setText("Watchlist");

        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(stocksPortfolioLabel)
                                .addGap(173, 173, 173)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sortTickerWatchlistButtonAsc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(stocksLabel1)
                                            .addComponent(sortTickerWatchlistButtonDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(5, 5, 5)
                                                .addComponent(tickerWatchlistScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(sortPriceButtonAsc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sortPriceButtonDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                                            .addComponent(priceWatchlistScrollPanel)))
                                    .addComponent(clearButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortTickerButtonAsc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stocksLabel)
                            .addComponent(sortTickerButtonDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(tickerScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortSharesButtonAsc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sortSharesButtonDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sharesScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortEquityButtonDesc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(equityScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortEquityButtonAsc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(displayTotalEquityButton)
                .addGap(262, 262, 262))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(stocksPortfolioLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addComponent(displayTotalEquityButton)
                .addGap(127, 127, 127)
                .addComponent(stocksLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortTickerButtonAsc)
                    .addComponent(sortSharesButtonAsc)
                    .addComponent(sortEquityButtonAsc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortSharesButtonDesc, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sortTickerButtonDesc)
                        .addComponent(sortEquityButtonDesc)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sharesScrollPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(tickerScrollPanel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(equityScrollPanel, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addGap(99, 99, 99)
                .addComponent(stocksLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortTickerWatchlistButtonAsc)
                    .addComponent(sortPriceButtonAsc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortTickerWatchlistButtonDesc)
                    .addComponent(sortPriceButtonDesc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tickerWatchlistScrollPanel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceWatchlistScrollPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton1)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tickerScrollPanelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tickerScrollPanelPropertyChange
        // Adding the scrolling code to enable both panels to scroll in tandem
        tickerScrollPanel.setVerticalScrollBar(sharesScrollPanel.getVerticalScrollBar());
        //tickerScrollPanel.setVerticalScrollBar(equityScrollPanel.getVerticalScrollBar());
    }//GEN-LAST:event_tickerScrollPanelPropertyChange

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // clear text
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void sortTickerButtonAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTickerButtonAscActionPerformed
        // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];

        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");

        // Sort the arrays
        for(int x = 0; x < ticker.length; x++)
        {
            for(int y = 0; y < ticker.length-1; y++)
            {
                if(ticker[y].compareTo(ticker[y+1]) > 0)
                {
                    String a = ticker[y];
                    ticker[y] = ticker[y+1];
                    ticker[y+1] = a;
                    // sort the Shares
                    String n = shares[y];
                    shares[y] = shares[y+1];
                    shares[y+1] = n;

                    double d = equityDbl[y];
                    equityDbl[y] = equityDbl[y+1];
                    equityDbl[y+1] = d;
                } // end if
            } // end for
        } // end for
        // Display the now sorted arrays

        for(int a = 0; a < ticker.length; a++)
        {
            tickerList.append(ticker[a]+ "\n");
            sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            equityList.append(String.valueOf(equityDbl[a]) + "\n");
        } // end
        // repeat for the shares
    }//GEN-LAST:event_sortTickerButtonAscActionPerformed

    private void sortSharesButtonAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSharesButtonAscActionPerformed
   // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");

        // Sort the arrays
        for(int x = 0; x < ticker.length; x++)
        {
            for(int y = 0; y < ticker.length-1; y++)
            {
                if(shares[y].compareTo(shares[y+1]) > 0)
                {
                    String a = ticker[y];
                    ticker[y] = ticker[y+1];
                    ticker[y+1] = a;
                    // sort the Shares
                    String n = shares[y];
                    shares[y] = shares[y+1];
                    shares[y+1] = n;

                    double d = equityDbl[y];
                    equityDbl[y] = equityDbl[y+1];
                    equityDbl[y+1] = d;
                } // end if
            } // end for
        } // end for
        // Display the now sorted arrays

        for(int a = 0; a < ticker.length; a++)
        {
            tickerList.append(ticker[a]+ "\n");
            sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            equityList.append(String.valueOf(equityDbl[a])+ "\n");
        } // end for
        // repeat for the shares
    }//GEN-LAST:event_sortSharesButtonAscActionPerformed

    private void sortTickerButtonDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTickerButtonDescActionPerformed
        // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for
        
        
// Have the arrays. Clear the text areas
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");
        
        // sort arrays in reverse order
        Arrays.sort(ticker, Collections.reverseOrder());
        
         // Display the now sorted arrays
        for(int a = 0; a < ticker.length; a++)
        {
            tickerList.append(ticker[a]+ "\n");
            sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
           equityList.append(String.valueOf(equityDbl[a])+ "\n");
        } // end for
    }//GEN-LAST:event_sortTickerButtonDescActionPerformed

    private void sortSharesButtonDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSharesButtonDescActionPerformed
          // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");

        // sort arrays in reverse order
        Arrays.sort(shares, Collections.reverseOrder());

        // Display the now sorted arrays
        for(int a = 0; a < ticker.length; a++)
        {
            tickerList.append(ticker[a]+ "\n");
            sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            equityList.append(String.valueOf(equityDbl[a])+ "\n");
        }
    }//GEN-LAST:event_sortSharesButtonDescActionPerformed

    private void sortEquityButtonAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortEquityButtonAscActionPerformed
         // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for

// Have the arrays. Clear the text areas
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");

        // Sort the arrays
        for(int x = 0; x < ticker.length; x++)
        {
            for(int y = 0; y < ticker.length-1; y++)
            {
                if((equityDbl[y]) > (equityDbl[y+1]))
                {
                    String a = ticker[y];
                    ticker[y] = ticker[y+1];
                    ticker[y+1] = a;
                    // sort the Shares
                    String n = shares[y];
                    shares[y] = shares[y+1];
                    shares[y+1] = n;

                    double d = equityDbl[y];
                    equityDbl[y] = equityDbl[y+1];
                    equityDbl[y+1] = d;
                } // end if
            } // end for
        } // end for
        // Display the now sorted arrays

        for(int a = 0; a < ticker.length; a++)
        {
            tickerList.append(ticker[a]+ "\n");
            sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            equityList.append(String.valueOf(equityDbl[a]) + "\n");
        } // end for
        // repeat for the shares
    }//GEN-LAST:event_sortEquityButtonAscActionPerformed

    private void sortEquityButtonDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortEquityButtonDescActionPerformed
          // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        Double[] equityDbl = new Double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerList.setText("");
        sharesList.setText("");
        equityList.setText("");

        // sort arrays in reverse order
        Arrays.sort(equityDbl, Collections.reverseOrder());

        // Display the now sorted arrays
        for(int a = 0; a < ticker.length; a++)
        {
            tickerList.append(ticker[a]+ "\n");
            sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            equityList.append(String.valueOf(equityDbl[a])+ "\n");
        } // end for
    }//GEN-LAST:event_sortEquityButtonDescActionPerformed

    private void displayTotalEquityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTotalEquityButtonActionPerformed
        double total;
        double subTotal;
        total = Double.parseDouble(equityList.getText());
    }//GEN-LAST:event_displayTotalEquityButtonActionPerformed

    private void sortPriceButtonAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPriceButtonAscActionPerformed
       // Create the arrays that split elements at new lines
        String ticker[] = tickerWatchlist.getText().split("\n");
        //String shares[] = sharesList.getText().split("\n");
        String equityStr[] = priceWatchlist.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for

// Have the arrays. Clear the text areas
        tickerWatchlist.setText("");
        //sharesList.setText("");
        priceWatchlist.setText("");

        // Sort the arrays
        for(int x = 0; x < ticker.length; x++)
        {
            for(int y = 0; y < ticker.length-1; y++)
            {
                if((equityDbl[y]) > (equityDbl[y+1]))
                {
                    String a = ticker[y];
                    ticker[y] = ticker[y+1];
                    ticker[y+1] = a;
                    // sort the Shares
                    //String n = shares[y];
                    // shares[y] = shares[y+1];
                    //shares[y+1] = n;

                    double d = equityDbl[y];
                    equityDbl[y] = equityDbl[y+1];
                    equityDbl[y+1] = d;
                } // end if
            } // end for
        } // end for
        // Display the now sorted arrays

        for(int a = 0; a < ticker.length; a++)
        {
            tickerWatchlist.append(ticker[a]+ "\n");
            // sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            priceWatchlist.append(String.valueOf(equityDbl[a]) + "\n");
        } // end for
        // repeat for the shares
    }//GEN-LAST:event_sortPriceButtonAscActionPerformed

    private void sortPriceButtonDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPriceButtonDescActionPerformed
       // Create the arrays that split elements at new lines
        String ticker[] = tickerWatchlist.getText().split("\n");
        //String shares[] = sharesList.getText().split("\n");
        String equityStr[] = priceWatchlist.getText().split("\n");
        // Create doubles array
        Double[] equityDbl = new Double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerWatchlist.setText("");
        // sharesList.setText("");
        priceWatchlist.setText("");

        // sort arrays in reverse order
        Arrays.sort(equityDbl, Collections.reverseOrder());

        // Display the now sorted arrays
        for(int a = 0; a < ticker.length; a++)
        {
            tickerWatchlist.append(ticker[a]+ "\n");
            //sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            priceWatchlist.append(String.valueOf(equityDbl[a])+ "\n");
        }
    }//GEN-LAST:event_sortPriceButtonDescActionPerformed

    private void sortTickerWatchlistButtonAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTickerWatchlistButtonAscActionPerformed
       // Create the arrays that split elements at new lines
        String ticker[] = tickerWatchlist.getText().split("\n");
        //String shares[] = sharesList.getText().split("\n");
        String equityStr[] = priceWatchlist.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];

        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerWatchlist.setText("");
        //sharesList.setText("");
        priceWatchlist.setText("");

        // Sort the arrays
        for(int x = 0; x < ticker.length; x++)
        {
            for(int y = 0; y < ticker.length-1; y++)
            {
                if(ticker[y].compareTo(ticker[y+1]) > 0)
                {
                    String a = ticker[y];
                    ticker[y] = ticker[y+1];
                    ticker[y+1] = a;
                    // sort the Shares
                    //String n = shares[y];
                    //shares[y] = shares[y+1];
                    // shares[y+1] = n;

                    double d = equityDbl[y];
                    equityDbl[y] = equityDbl[y+1];
                    equityDbl[y+1] = d;
                } // end if
            } // end for
        } // end for
        // Display the now sorted arrays

        for(int a = 0; a < ticker.length; a++)
        {
            tickerWatchlist.append(ticker[a]+ "\n");
            //sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            priceWatchlist.append(String.valueOf(equityDbl[a]) + "\n");
        } // end
        // repeat for the shares
    }//GEN-LAST:event_sortTickerWatchlistButtonAscActionPerformed

    private void clearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearButton1ActionPerformed

    private void tickerWatchlistScrollPanelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tickerWatchlistScrollPanelPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tickerWatchlistScrollPanelPropertyChange

    private void sortTickerWatchlistButtonDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortTickerWatchlistButtonDescActionPerformed
        // Create the arrays that split elements at new lines
        String ticker[] = tickerList.getText().split("\n");
        String shares[] = sharesList.getText().split("\n");
        String equityStr[] = equityList.getText().split("\n");
        // Create doubles array
        double equityDbl[] = new double[equityStr.length];
        // populate the array
        for(int d = 0; d < equityDbl.length; d++)
        {
            equityDbl[d] = Double.parseDouble(equityStr[d]);
        } // end for


// Have the arrays. Clear the text areas
        tickerWatchlist.setText("");
        // sharesList.setText("");
        priceWatchlist.setText("");

        // sort arrays in reverse order
        Arrays.sort(ticker, Collections.reverseOrder());

        // Display the now sorted arrays
        for(int a = 0; a < ticker.length; a++)
        {
            tickerWatchlist.append(ticker[a]+ "\n");
            //sharesList.append(shares[a]+ "\n");
            // Convert the doubles back to strings and display
            priceWatchlist.append(String.valueOf(equityDbl[a])+ "\n");
        } // end for
    }//GEN-LAST:event_sortTickerWatchlistButtonDescActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearButton1;
    private javax.swing.JButton displayTotalEquityButton;
    private javax.swing.JTextArea equityList;
    private javax.swing.JScrollPane equityScrollPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextArea priceWatchlist;
    private javax.swing.JScrollPane priceWatchlistScrollPanel;
    private javax.swing.JTextArea sharesList;
    private javax.swing.JScrollPane sharesScrollPanel;
    private javax.swing.JButton sortEquityButtonAsc;
    private javax.swing.JButton sortEquityButtonDesc;
    private javax.swing.JButton sortPriceButtonAsc;
    private javax.swing.JButton sortPriceButtonDesc;
    private javax.swing.JButton sortSharesButtonAsc;
    private javax.swing.JButton sortSharesButtonDesc;
    private javax.swing.JButton sortTickerButtonAsc;
    private javax.swing.JButton sortTickerButtonDesc;
    private javax.swing.JButton sortTickerWatchlistButtonAsc;
    private javax.swing.JButton sortTickerWatchlistButtonDesc;
    private javax.swing.JLabel stocksLabel;
    private javax.swing.JLabel stocksLabel1;
    private javax.swing.JLabel stocksPortfolioLabel;
    private javax.swing.JTextArea tickerList;
    private javax.swing.JScrollPane tickerScrollPanel;
    private javax.swing.JTextArea tickerWatchlist;
    private javax.swing.JScrollPane tickerWatchlistScrollPanel;
    // End of variables declaration//GEN-END:variables
}
